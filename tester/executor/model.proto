syntax = "proto3";

option go_package = "github.com/josephlewis42/spec-tester/tester/executor";

message Metadata {
  // Unique ID for the resource.
  string uid = 1;

  // Labels for filtering.
  map<string, string> labels = 2;

  // Human readable name to be shown in reports
  string display_name = 3;

  // Markdown description to be shown in reports.
  string description_markdown = 4;
}

message TestCase {
  Metadata metadata = 1;

  oneof test_type {
    SkipTest skip = 2;
    EvalTest eval = 3;
    InvalidTest invalid = 4;
  }
}

// A test that's skipped.
message SkipTest {
  // Reason the test was skipped.
  string message = 1;
}

// A test that's evaluated and checked against a value.
message EvalTest {
  string input = 1;

  string expectation_type = 2;
  string expectation_options_json = 3;
}

// A test that will always fail.
message InvalidTest {
  // Reason the test was failed.
  string message = 1;
}

message Implementation {
  Metadata metadata = 1;
  
  repeated ImplementationVariant variants = 2;
}

message ImplementationVariant {
    Metadata metadata = 1;
  
    repeated string specification_uids = 2;

    // Command to run for tests, $(PROGRAM) and $(PROGRAM_PATH) will be replaced.
	  repeated string test_command = 3;

    oneof runtime {
      ImplementationRuntimeLocal local = 4;
    }

}

message ImplementationRuntimeLocal {
  // Local doesn't use any parameters.
}

message Specification {
    Metadata metadata = 1;

    // Sections that make up this specification.
    repeated SpecificationSection sections = 2;
}

message SpecificationSection {
  Metadata metadata = 1;

  oneof content {
    SpecificationSectionSummary section_summary = 2;
    SpecificationTestSummary test_summary = 3;
  }
}

message SpecificationSectionSummary {
  repeated SpecificationSection subsections = 1;
}

message SpecificationTestSummary {
  // Label selctor for the tests that make up this section.
  string test_selector = 1;

  // Whether this section's tests are optional.
  bool optional = 2;
}

message ProcessOutput {
  string stdout = 1;
  string stderr = 2;
  int64 exit_code = 3;
}

message TestResult {
  message Success {

  }

  message Failure {
    string message = 1;
  }

  oneof status {
    Success success = 1;
    Failure failure = 2;
    ProcessOutput example = 3;
  }
}